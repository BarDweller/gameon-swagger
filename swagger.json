{
    "swagger": "2.0",
    "info": {
        "title": "Game On",
        "description": "A throwback text application.  Check <a href='https://game-on.org'>Game-On.org</a> for more info!\n",
        "version": "1.0.0"
    },
    "host": "game-on.org",
    "schemes": [
        "https"
    ],
    "basePath": "/",
    "produces": [
        "application/json"
    ],
    "tags": [
        {
            "name": "sites"
        },
        {
            "name": "map"
        },
        {
            "name": "concierge"
        },
        {
            "name": "player"
        },
        {
            "name": "room"
        }
    ],
    "paths": {
        "/concierge/startingRoom": {
            "get": {
                "summary": "Starting Room",
                "description": "Returns a starting room for this player.  Called before the player has really navigated around much.\n",
                "tags": [
                    "concierge"
                ],
                "responses": {
                    "200": {
                        "description": "An object describing the relationship to a room.",
                        "schema": {
                            "$ref": "#/definitions/ConciergeRoomConnection"
                        }
                    }
                }
            }
        },
        "/concierge/rooms/{roomId}/{exitName}": {
            "get": {
                "parameters": [
                    {
                        "name": "roomId",
                        "in": "path",
                        "description": "The unique ID of a valid room.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "exitName",
                        "in": "path",
                        "description": "The name of an exit from the room in {roomId}.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Get connected rooms",
                "tags": [
                    "concierge"
                ],
                "description": "Provides connection information to the room that is accessible from this exit.\n",
                "responses": {
                    "200": {
                        "description": "An object describing the room available at this exit.",
                        "schema": {
                            "$ref": "#/definitions/ConciergeRoomConnection"
                        }
                    }
                }
            }
        },
        "/concierge/rooms/{roomId}": {
            "get": {
                "parameters": [
                    {
                        "name": "roomId",
                        "in": "path",
                        "description": "The unique ID of a valid room",
                        "type": "string",
                        "required": true
                    }
                ],
                "summary": "Describe a room.",
                "description": "Returns the connection information about a room by ID.\n",
                "tags": [
                    "concierge"
                ],
                "responses": {
                    "200": {
                        "description": "An object describing the room you requested.",
                        "schema": {
                            "$ref": "#/definitions/ConciergeRoomConnection"
                        }
                    }
                }
            }
        },
        "/concierge/registerRoom": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "room",
                        "in": "body",
                        "description": "A new room to register with the concierge",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConciergeNewRoom"
                        }
                    }
                ],
                "summary": "Register a new room.",
                "tags": [
                    "concierge"
                ],
                "responses": {
                    "200": {
                        "description": "An object that tells whether the room was registered.",
                        "schema": {
                            "$ref": "#/definitions/ConciergeResponse"
                        }
                    }
                }
            }
        },
        "/map/v1/": {
            "get": {
                "tags": [
                    "map"
                ],
                "operationId": "basicGet",
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/map/v1/health": {
            "get": {
                "tags": [
                    "map"
                ],
                "summary": "Check application health",
                "description": "",
                "operationId": "healthCheck",
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/map/v1/sites": {
            "get": {
                "tags": [
                    "map",
                    "sites"
                ],
                "summary": "List sites",
                "description": "Get a list of registered sites. Use link headers for pagination.",
                "operationId": "listAll",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "filter by owner",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "filter by name",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "204": {
                        "description": "No results found"
                    }
                }
            },
            "post": {
                "tags": [
                    "map",
                    "sites"
                ],
                "summary": "Create a room",
                "description": "When a room is registered, the map will generate the appropriate paths to place the room into the map. The map wll only generate links using standard 2-d compass directions. The 'exits' attribute in the return value describes connected/adjacent sites. ",
                "operationId": "createRoom",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "New room attributes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoomInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Site"
                        }
                    }
                }
            }
        },
        "/map/v1/sites/{id}": {
            "get": {
                "tags": [
                    "map",
                    "sites"
                ],
                "summary": "Get a specific room",
                "description": "",
                "operationId": "getRoom",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "target room id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Site"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "map",
                    "sites"
                ],
                "summary": "Update a specific room",
                "description": "",
                "operationId": "updateRoom",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "target room id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated room attributes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoomInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Site"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "map",
                    "sites"
                ],
                "summary": "Delete a specific room",
                "description": "",
                "operationId": "deleteRoom",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "target room id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete successful"
                    }
                }
            }
        },
        "/play/players": {
            "get": {
                "summary": "List all players",
                "tags": [
                    "player"
                ],
                "description": "Provides a list of all players who have authenticated.\n",
                "responses": {
                    "200": {
                        "description": "The list of players.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Player"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new player.",
                "tags": [
                    "player"
                ],
                "description": "Creates a new player for future use.\n",
                "parameters": [
                    {
                        "name": "playerInformation",
                        "in": "body",
                        "description": "The new player's information.",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the player was created successfully."
                    },
                    "409": {
                        "description": "Indicates that a player with this ID already exists."
                    }
                }
            }
        },
        "/play/players/{playerId}": {
            "get": {
                "summary": "Retrieve a specific player by ID",
                "parameters": [
                    {
                        "name": "playerId",
                        "in": "path",
                        "description": "The unique id of a player to look up",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "player"
                ],
                "description": "Looks up this player by his/her unique ID and provides their information.\n",
                "responses": {
                    "200": {
                        "description": "An object representing this player",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates an existing player.",
                "parameters": [
                    {
                        "name": "playerId",
                        "in": "path",
                        "description": "The unique id of a player to look up",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "playerInformation",
                        "in": "body",
                        "description": "The updated list of player's information.",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "player"
                ],
                "description": "Updates this existing player with a new set of information.\n",
                "responses": {
                    "204": {
                        "description": "Indicating the player has been successfully updated."
                    },
                    "404": {
                        "description": "Indicating that the player didn't exist to begin with."
                    }
                }
            },
            "delete": {
                "summary": "Deletes an existing player.",
                "parameters": [
                    {
                        "name": "playerId",
                        "in": "path",
                        "description": "The unique id of a player to look up",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "player"
                ],
                "description": "Deletes a player that exists.\n",
                "responses": {
                    "200": {
                        "description": "Indicating the player has been successfully deleted."
                    },
                    "404": {
                        "description": "Indicating that the player didn't exist to begin with."
                    }
                }
            }
        },
        "/play/auth/verify/{auth}": {
            "get": {
                "summary": "Verifies that an authentication is valid.",
                "parameters": [
                    {
                        "name": "auth",
                        "in": "path",
                        "description": "See description for details.",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "Authorization"
                ],
                "description": "Takes a path parameter of the form `{AUTH_TYPE}::...`, \nwhich varies depending on the type of authentication used:\n- **Twitter**: `TWITTER::TOKEN::TOKEN_SECRET::USER_ID`\n- **Facebook**: `FACEBOOK::ACCESSTOKEN`\n- **Dummy**: `DUMMY::ACCESSTOKEN`\n\nIn the `Dummy` case, no authentication will be performed.\nIn the other two cases, you will need a valid access token (and\npossibly a valid token secret, and user id) for success.\n",
                "responses": {
                    "200": {
                        "description": "A response regarding the validity of this authorization.",
                        "schema": {
                            "$ref": "#/definitions/ValidityObject"
                        }
                    },
                    "400": {
                        "description": "Your request was incorrect (didn't match the forms in the description')"
                    },
                    "401": {
                        "description": "Your authentication was invalid."
                    },
                    "500": {
                        "description": "Something went wrong on the server."
                    }
                }
            }
        },
        "/play/auth/introspect/{auth}": {
            "get": {
                "summary": "Shows the details of an oauth collaboration.",
                "parameters": [
                    {
                        "name": "auth",
                        "in": "path",
                        "description": "See description for details.",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "Authorization"
                ],
                "description": "Takes a path parameter of the form `{AUTH_TYPE}::...`, \nwhich varies depending on the type of authentication used:\n- **Twitter**: `TWITTER::TOKEN::TOKEN_SECRET::USER_ID`\n- **Facebook**: `FACEBOOK::ACCESSTOKEN`\n- **Dummy**: `DUMMY::ACCESSTOKEN`\n\nIn the `Dummy` case, no authentication will be performed.\nIn the other two cases, you will need a valid access token (and\npossibly a valid token secret, and user id) for success.\n",
                "responses": {
                    "200": {
                        "description": "A response regarding the validity of this authorization.",
                        "schema": {
                            "$ref": "#/definitions/IntrospectionObject"
                        }
                    },
                    "400": {
                        "description": "Your request was incorrect (didn't match the forms in the description')"
                    },
                    "401": {
                        "description": "Your authentication was invalid."
                    },
                    "500": {
                        "description": "Something went wrong on the server."
                    }
                }
            }
        },
        "/play/auth/jwt/{auth}": {
            "get": {
                "summary": "Shows the details of an oauth collaboration.",
                "parameters": [
                    {
                        "name": "auth",
                        "in": "path",
                        "description": "See description for details.",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "Authorization"
                ],
                "description": "Takes a path parameter of the form `{AUTH_TYPE}::...`, \nwhich varies depending on the type of authentication used:\n- **Twitter**: `TWITTER::TOKEN::TOKEN_SECRET::USER_ID`\n- **Facebook**: `FACEBOOK::ACCESSTOKEN`\n- **Dummy**: `DUMMY::ACCESSTOKEN`\n\nIn the `Dummy` case, no authentication will be performed.\nIn the other two cases, you will need a valid access token (and\npossibly a valid token secret, and user id) for success.\n",
                "responses": {
                    "200": {
                        "description": "A response regarding the validity of this authorization.",
                        "schema": {
                            "$ref": "#/definitions/JWTObject"
                        }
                    },
                    "400": {
                        "description": "Your request was incorrect (didn't match the forms in the description')"
                    },
                    "401": {
                        "description": "Your authentication was invalid."
                    },
                    "500": {
                        "description": "Something went wrong on the server."
                    }
                }
            }
        }
    },
    "definitions": {
        "Site": {
            "type": "object",
            "required": [
                "_id",
                "exits",
                "info",
                "owner"
            ],
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "1",
                    "description": "Site id",
                    "readOnly": true
                },
                "info": {
                    "$ref": "#/definitions/RoomInfo"
                },
                "exits": {
                    "$ref": "#/definitions/Exits"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner"
                },
                "coord": {
                    "$ref": "#/definitions/Coordinates"
                }
            },
            "description": "A room (or suite) is anchored into the map as a site when it is registered. The mapping should remain fairly stable unless a room is removed and re-appears."
        },
        "Exits": {
            "type": "object",
            "properties": {
                "n": {
                    "$ref": "#/definitions/Exit"
                },
                "w": {
                    "$ref": "#/definitions/Exit"
                },
                "s": {
                    "$ref": "#/definitions/Exit"
                },
                "e": {
                    "$ref": "#/definitions/Exit"
                },
                "u": {
                    "$ref": "#/definitions/Exit"
                },
                "d": {
                    "$ref": "#/definitions/Exit"
                }
            },
            "description": "When a room is placed in the map, paths are created between it and other rooms. Each exit provides the door and URL required for the player to traverse the path to the target room."
        },
        "Doors": {
            "type": "object",
            "properties": {
                "n": {
                    "type": "string",
                    "example": "A knobbly wooden door with a rough carving or a friendly face",
                    "description": "North door (140 characters)"
                },
                "w": {
                    "type": "string",
                    "example": "A fake wooden door with stickers of friendly faces plastered all over it",
                    "description": "West door (140 characters)"
                },
                "s": {
                    "type": "string",
                    "example": "A warped wooden door with a friendly face branded on the corner",
                    "description": "South door (140 characters)"
                },
                "e": {
                    "type": "string",
                    "example": "A polished wooden door with an inlaid friendly face",
                    "description": "East door (140 characters)"
                },
                "u": {
                    "type": "string",
                    "example": "A scuffed and scratched oaken trap door",
                    "description": "Door in the ceiling (Up) (140 characters)"
                },
                "d": {
                    "type": "string",
                    "example": "A rough-cut particle board hatch",
                    "description": "Door in the floor (Down) (140 characters)"
                }
            },
            "description": "Descriptions for the doors in the room. These may be used by other rooms to describe the appearance of the door. Keys should be relative to this room (e, w, n, s, u, d). Values are simple string descriptions for the outside of the door. If the string value references a direction at all, it should be the opposite direction:for the East door, the direction mentioned should be West. Descriptions are optional, and will be generated if absent."
        },
        "Coordinates": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "integer",
                    "format": "int32"
                },
                "y": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ConnectionDetails": {
            "type": "object",
            "required": [
                "target",
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "example": "websocket",
                    "description": "Connection type"
                },
                "target": {
                    "type": "string",
                    "example": "wss://secondroom:9008/barn/ws",
                    "description": "Connection target, usually a URL"
                }
            },
            "description": "Connection details used by the mediator to connect to the room on the player's behalf"
        },
        "RoomInfo": {
            "type": "object",
            "required": [
                "connectionDetails",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "First Room",
                    "description": "Short/Terse name of the target room, must be unique within the owner's rooms"
                },
                "connectionDetails": {
                    "$ref": "#/definitions/ConnectionDetails"
                },
                "fullName": {
                    "type": "string",
                    "example": "The First Room",
                    "description": "Human-friendly room name"
                },
                "description": {
                    "type": "string",
                    "example": "A helpful room with doors in every possible direction.",
                    "description": "Player-friendly room description (140 characters)"
                },
                "doors": {
                    "$ref": "#/definitions/Doors"
                }
            },
            "description": "Mutable information: descriptive elements, service URL, etc."
        },
        "Exit": {
            "type": "object",
            "required": [
                "_id",
                "connectionDetails",
                "door",
                "name"
            ],
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "2",
                    "description": "Id of the target room",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "example": "Barn",
                    "description": "Short/Terse name of the target room"
                },
                "fullName": {
                    "type": "string",
                    "example": "The First Room",
                    "description": "Human-friendly room name"
                },
                "door": {
                    "type": "string",
                    "example": "Big red barn door",
                    "description": "Player-friendly description of the door (provided by the target room or generated by the map)"
                },
                "connectionDetails": {
                    "$ref": "#/definitions/ConnectionDetails"
                }
            },
            "description": "An exit provides the door and URL required for the player to traverse the path to the next room."
        },
        "ConciergeRoomConnection": {
            "type": "object",
            "properties": {
                "rel": {
                    "type": "object",
                    "properties": {
                        "roomId": {
                            "type": "string",
                            "description": "A unique identifier for this room."
                        },
                        "endpoints": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "A WebSocket connection where to talk to this room."
                            }
                        }
                    }
                }
            }
        },
        "ConciergeNewRoom": {
            "type": "object",
            "properties": {
                "roomName": {
                    "type": "string",
                    "description": "The name of this room."
                },
                "exits": {
                    "type": "array",
                    "description": "An array of Exits that describe related rooms.",
                    "items": {
                        "$ref": "#/definitions/ConciergeExit"
                    }
                },
                "attributes": {
                    "$ref": "#/definitions/ConciergeAttributes"
                }
            }
        },
        "ConciergeResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "description": "The response from the server."
                }
            }
        },
        "ConciergeAttributes": {
            "type": "object",
            "properties": {
                "endPoint": {
                    "type": "string",
                    "description": "The WebSocket URL for how to interact with this room."
                },
                "startLocation": {
                    "type": "string",
                    "description": "A true or false indicator of whether you can start in this room.\n"
                }
            }
        },
        "ConciergeExit": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of this exit, so you could \"/go\" to it."
                },
                "room": {
                    "type": "string",
                    "description": "The unique ID of an associated room."
                },
                "description": {
                    "type": "string",
                    "description": "The description of this exit that appears when the user \"/look\"s."
                }
            }
        },
        "Player": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for this player, of the form 'authType':'id'\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the human associated with this player."
                },
                "favoriteColor": {
                    "type": "string",
                    "description": "The player is asked their favorite color when they login."
                }
            }
        },
        "ValidityObject": {
            "type": "object",
            "properties": {
                "valid": {
                    "type": "string",
                    "description": "A true or false indicator of whether the authorization was valid."
                }
            }
        },
        "IntrospectionObject": {
            "type": "object",
            "properties": {
                "valid": {
                    "type": "string",
                    "description": "A true or false indicator of whether the authorization was valid."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the token returned by the authentication method."
                },
                "id": {
                    "type": "string",
                    "description": "The id for the user that can be created based on this auth."
                },
                "email": {
                    "type": "string",
                    "description": "This user's email address as gleaned from OAuth."
                }
            }
        },
        "JWTObject": {
            "type": "object",
            "properties": {
                "jwt": {
                    "type": "string",
                    "description": "A JSON Web Token that represents an encoded IntrospectionObject."
                }
            }
        }
    }
}
